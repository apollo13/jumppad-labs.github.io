(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[825],{1730:function(s,n,o){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/template",function(){return o(384)}])},8691:function(s,n,o){"use strict";o.r(n),o.d(n,{__N_SSG:function(){return r}});var e=o(5893),a=o(1151);function t(s){let n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",em:"em"},(0,a.ah)(),s.components),{Properties:o,Property:t}=n;return o||l("Properties",!0),t||l("Property",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{id:"meta_properties",children:"Meta Properties"}),"\n",(0,e.jsx)(n.p,{children:"All jumppad resources have the following read only properties."}),"\n",(0,e.jsxs)(o,{children:[(0,e.jsxs)(t,{name:"depends_on",type:"[]string",required:"false",value:"",children:[(0,e.jsxs)(n.p,{children:["An array of resources that this resource depends on. Jumppad will ensure that\nall resources referenced in ",(0,e.jsx)(n.code,{children:"depends_on"})," are created before the resource."]}),(0,e.jsx)(n.p,{children:'For example, the resource "mine" would be created after the resource "myother".'}),(0,e.jsx)(n.pre,{language:"hcl",code:'  resource "container" "mine" {\n    depends_on = ["resource.container.myother"]\n  }\n  \n  resource "container" "myother" {\n\n  }\n',children:(0,e.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    depends_on </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;resource.container.myother&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;myother&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})}),(0,e.jsxs)(n.p,{children:["Where possible Jumppad attempts to automatically create a dependency graph\nby using interpolated properties. For example, the previous scenario could\nhave been written without using ",(0,e.jsx)(n.code,{children:"depends_on"})," by using interpolated properties."]}),(0,e.jsx)(n.pre,{language:"hcl",code:'  resource "container" "mine" {\n    image {\n      name = resource.container.myother.image.name\n    }\n  }\n  \n  resource "container" "myother" {\n    image {\n      name = "myimage:version"\n    }\n  }\n',children:(0,e.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">container</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">myother</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">image</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">name</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;myother&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;myimage:version&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,e.jsx)(t,{name:"disabled",type:"bool",required:"false",value:"false",children:(0,e.jsx)(n.p,{children:"If set to false the resource will not be created."})}),(0,e.jsxs)(t,{name:"id",type:"string",required:"false",value:"",readonly:!0,children:[(0,e.jsxs)(n.p,{children:["The unique ",(0,e.jsx)(n.code,{children:"id"})," for the resource, this value can be used in interpolation\nsyntax to reference properties for a resource."]}),(0,e.jsx)(n.pre,{code:"  resource.container.nic\n  ouput.myoutput\n  module.mine.submodule.resource.container.nic\n  module.mine.submodule.ouput.myoutput\n\n",children:(0,e.jsx)(n.code,{children:"  resource.container.nic\n  ouput.myoutput\n  module.mine.submodule.resource.container.nic\n  module.mine.submodule.ouput.myoutput\n\n"})})]}),(0,e.jsxs)(t,{name:"name",type:"string",required:"false",value:"",readonly:!0,children:[(0,e.jsxs)(n.p,{children:["The name of the resource, ",(0,e.jsx)(n.em,{children:"note:"})," this value is not unique and does not\ntake into account if the resource is embedded in a module."]}),(0,e.jsxs)(n.p,{children:["This value is the same as the ",(0,e.jsx)(n.code,{children:"name"}),' field of the resource. i.e "mine".']}),(0,e.jsx)(n.pre,{language:"hcl",code:'  resource "container" "mine" {}\n',children:(0,e.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>'})})]}),(0,e.jsxs)(t,{name:"type",type:"string",required:"true",value:"",readonly:!0,children:[(0,e.jsx)(n.p,{children:"The string type of the resource."}),(0,e.jsxs)(n.p,{children:["This value is the same as the ",(0,e.jsx)(n.code,{children:"type"}),' field of the resource. i.e. "container"']}),(0,e.jsx)(n.pre,{language:"hcl",code:'  resource "container" "mine" {}\n',children:(0,e.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>'})})]}),(0,e.jsxs)(t,{name:"module",type:"string",required:"false",value:"",readonly:!0,children:[(0,e.jsx)(n.p,{children:"The full module path for the resource. Should the resource be included\nin a module, this value will be the name of the module and any parent\nmodules that the resource is embedded in."}),(0,e.jsxs)(n.p,{children:["For example, given the following structure, the ",(0,e.jsx)(n.code,{children:"module"}),' value would be\n"mymodule.mysubmodule".']}),(0,e.jsx)(n.pre,{language:"hcl",code:'  resource "container" "mine" {}\n\n  ## included in\n\n  module "mysubmodule" {}\n  \n  ## included in\n\n  module "mymodule" {}\n',children:(0,e.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">## included in</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">module</span><span style="color: var(--shiki-token-string-expression)"> &quot;mysubmodule&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">## included in</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">module</span><span style="color: var(--shiki-token-string-expression)"> &quot;mymodule&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>'})})]}),(0,e.jsx)(t,{name:"file",type:"string",required:"false",value:"",readonly:!0,children:(0,e.jsx)(n.p,{children:"The absolute path of the file that contains this resource"})})]})]})}var r=!0;function l(s,n){throw Error("Expected "+(n?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),s.components);return n?(0,e.jsx)(n,Object.assign({},s,{children:(0,e.jsx)(t,s)})):t(s)}},384:function(s,n,o){"use strict";o.r(n),o.d(n,{__N_SSG:function(){return l}});var e=o(5893),a=o(1151),t=o(8691);function r(s){let n=Object.assign({h1:"h1",code:"code",p:"p",a:"a",h2:"h2",strong:"strong",pre:"pre",h3:"h3"},(0,a.ah)(),s.components),{Intro:o,Properties:r,Property:l}=n;return o||i("Intro",!0),r||i("Properties",!0),l||i("Property",!0),(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.h1,{children:["Template ",(0,e.jsx)(n.code,{children:"template"})]}),"\n",(0,e.jsxs)(o,{children:[(0,e.jsx)(n.p,{children:"The Remove Exec resource allows the execution of arbitrary commands and scripts.\nExecution can either be in a stand alone container or can target an existing\nand running container."}),(0,e.jsx)(n.p,{children:"Documentation is work in progress, please see the old documentation at:"}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:"https://shipyard.run/docs/resources/exec_remote",children:"https://shipyard.run/docs/resources/exec_remote"})})]}),"\n",(0,e.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,e.jsxs)(r,{children:[(0,e.jsxs)(l,{name:"source",type:"string",required:"true",value:"",children:[(0,e.jsx)(n.p,{children:"Local path to the template source file"}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.strong,{children:"Local path"})}),(0,e.jsx)(n.pre,{language:"hcl",code:'  source = "myfile.txt"\n',children:(0,e.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;myfile.txt&quot;</span></span>\n<span></span>'})}),(0,e.jsx)(n.p,{children:(0,e.jsx)(n.strong,{children:"HereDoc"})}),(0,e.jsx)(n.pre,{language:"hcl",code:"  source = <<-EOF\n  My inline content\n  EOF\n",children:(0,e.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  My inline content</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span></span>'})})]}),(0,e.jsx)(l,{name:"destination",type:"string",required:"true",value:"",children:(0,e.jsx)(n.p,{children:"The destination to write the processed template to."})}),(0,e.jsxs)(l,{name:"variables",type:"map[string]interface",required:"false",value:"",children:[(0,e.jsx)(n.p,{children:"Variables to use with the template, variables are available to be used\nwithin the template using the go template syntax."}),(0,e.jsx)(n.pre,{language:"hcl",code:'  variables = {\n    data_dir = "/tmp"\n  }\n',children:(0,e.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    data_dir = &quot;/tmp&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})}),(0,e.jsx)(n.p,{children:"Given the above variables, these could be used within a template with the\nfollowing convention."}),(0,e.jsx)(n.pre,{language:"go",code:'  data_dir = "#{{ .Vars.data_dir }}"\n',children:(0,e.jsx)(n.code,{className:"language-go",children:'<span><span style="color: var(--shiki-color-text)">  data_dir </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;#{{ .Vars.data_dir }}&quot;</span></span>\n<span></span>'})})]})]}),"\n",(0,e.jsx)(t.default,{}),"\n",(0,e.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,e.jsx)(n.h3,{children:"Template using HereDoc"}),"\n",(0,e.jsx)(n.p,{children:"The following example shows how the template can be embedded into the resource\nstanza using HereDoc syntax."}),"\n",(0,e.jsx)(n.pre,{language:"hcl",code:'resource "template" "consul_config" {\n\n  source = <<-EOF\n  data_dir = "#{{ .Vars.data_dir }}"\n  log_level = "DEBUG"\n\n  datacenter = "dc1"\n  primary_datacenter = "dc1"\n\n  server = true\n\n  bootstrap_expect = 1\n  ui = true\n\n  bind_addr = "0.0.0.0"\n  client_addr = "0.0.0.0"\n  advertise_addr = "10.6.0.200"\n\n  ports {\n    grpc = 8502\n  }\n\n  connect {\n    enabled = true\n  }\n  EOF\n\n  destination = "./consul_config/consul.hcl"\n\n  variables = {\n    data_dir = "/tmp"\n  }\n}\n',children:(0,e.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;consul_config&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  data_dir </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;#{{ .Vars.data_dir }}&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  log_level </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;DEBUG&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  datacenter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;dc1&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  primary_datacenter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;dc1&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  server </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  bootstrap_expect </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">1</span></span>\n<span><span style="color: var(--shiki-color-text)">  ui </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  bind_addr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;0.0.0.0&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  client_addr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;0.0.0.0&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  advertise_addr </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;10.6.0.200&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">ports</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    grpc </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8502</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">connect</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    enabled </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./consul_config/consul.hcl&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    data_dir = &quot;/tmp&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(n.p,{children:"The file produced from this example would look like the following"}),"\n",(0,e.jsx)(n.pre,{language:"shell",code:'data_dir = "/tmp"\nlog_level = "DEBUG"\n\ndatacenter = "dc1"\nprimary_datacenter = "dc1"\n\nserver = true\n\nbootstrap_expect = 1\nui = true\n\nbind_addr = "0.0.0.0"\nclient_addr = "0.0.0.0"\nadvertise_addr = "10.6.0.200"\n\nports {\n  grpc = 8502\n}\n\nconnect {\n  enabled = true\n}\n',children:(0,e.jsx)(n.code,{className:"language-shell",children:'<span><span style="color: var(--shiki-color-text)">data_dir = </span><span style="color: var(--shiki-token-string-expression)">&quot;/tmp&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">log_level = </span><span style="color: var(--shiki-token-string-expression)">&quot;DEBUG&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">datacenter = </span><span style="color: var(--shiki-token-string-expression)">&quot;dc1&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">primary_datacenter = </span><span style="color: var(--shiki-token-string-expression)">&quot;dc1&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">server = </span><span style="color: var(--shiki-token-function)">true</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">bootstrap_expect = 1</span></span>\n<span><span style="color: var(--shiki-color-text)">ui = </span><span style="color: var(--shiki-token-function)">true</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">bind_addr = </span><span style="color: var(--shiki-token-string-expression)">&quot;0.0.0.0&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">client_addr = </span><span style="color: var(--shiki-token-string-expression)">&quot;0.0.0.0&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">advertise_addr = </span><span style="color: var(--shiki-token-string-expression)">&quot;10.6.0.200&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">ports {</span></span>\n<span><span style="color: var(--shiki-color-text)">  grpc = 8502</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">connect {</span></span>\n<span><span style="color: var(--shiki-color-text)">  enabled = </span><span style="color: var(--shiki-token-function)">true</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(n.h3,{children:"External Files"}),"\n",(0,e.jsx)(n.p,{children:"To leverage external files you can use the file function which loads a file\nreturning a string. This example also shows how interpolation\ncan be used to ensure a template is processed before it is consumed."}),"\n",(0,e.jsx)(n.pre,{language:"hcl",code:'resource "template "consul_config" {\n\n  source = file("./mytemplate.hcl") \n  destination = "./consul_config/consul.hcl"\n\n  variables = {\n    data_dir = "/tmp"\n  }\n}\n\ncontainer "consul" {\n  depends_on = ["template.consul_config"]\n\n  image   {\n    name = "consul:${var.consul_version}"\n  }\n\n  command = ["consul", "agent", "-config-file=/config/consul.hcl"]\n\n  volume {\n    source      = resource.template.consul_config.destination\n    destination = "/config/consul.hcl"\n  }\n}\n',children:(0,e.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">resource &quot;</span><span style="color: var(--shiki-token-keyword)">template</span><span style="color: var(--shiki-token-string-expression)"> &quot;consul_config&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> file(</span><span style="color: var(--shiki-token-string-expression)">&quot;./mytemplate.hcl&quot;</span><span style="color: var(--shiki-color-text)">) </span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./consul_config/consul.hcl&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    data_dir = &quot;/tmp&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">container</span><span style="color: var(--shiki-token-string-expression)"> &quot;consul&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  depends_on </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;template.consul_config&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)">   {</span></span>\n<span><span style="color: var(--shiki-color-text)">    name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;consul:</span><span style="color: var(--shiki-token-keyword)">${var</span><span style="color: var(--shiki-token-function)">.consul_version</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  command </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;consul&quot;</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-string-expression)">&quot;agent&quot;</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-string-expression)">&quot;-config-file=/config/consul.hcl&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">volume</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    source      </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">template</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">consul_config</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">destination</span></span>\n<span><span style="color: var(--shiki-color-text)">    destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/config/consul.hcl&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(n.h3,{children:"Inline variables"}),"\n",(0,e.jsx)(n.pre,{language:"hcl",code:'resource "template" "consul_config" {\n\n  source = <<-EOF\n  data_dir = "${data("test")}"\n  log_level = "DEBUG"\n\n  datacenter = "${variable.datacenter}"\n\n  server = ${variable.server}\n  EOF\n\n  destination = "./consul_config/consul.hcl"\n\n}\n',children:(0,e.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;consul_config&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span><span style="color: var(--shiki-color-text)">  data_dir </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">data</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;test&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  log_level </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;DEBUG&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  datacenter </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;</span><span style="color: var(--shiki-token-keyword)">${variable</span><span style="color: var(--shiki-token-function)">.datacenter</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  server </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> ${variable.server}</span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./consul_config/consul.hcl&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(n.h2,{id:"template_functions",children:"Template Functions"}),"\n",(0,e.jsx)(n.p,{children:"The template resource provides custom functions that can be used inside your\ntemplates as shown in the example below."}),"\n",(0,e.jsx)(n.pre,{language:"hcl",code:'resource "template" "consul_config" {\n\n  source = <<-EOF\n\n  file_content = "#{{ file "./myfile.txt" }}"\n  quote = #{{ .Var.something | quote }} \n  trim = #{{ .Var.with_whitespace | trim | quote }}\n\n  EOF\n\n  destination = "./consul_config/consul.hcl"\n}\n',children:(0,e.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;consul_config&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> &lt;&lt;-EOF</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  file_content </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;#{{ file &quot;</span><span style="color: var(--shiki-color-text)">./myfile</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">txt</span><span style="color: var(--shiki-token-string-expression)">&quot; }}&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  quote </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> #{{ .Var.something | quote }} </span></span>\n<span><span style="color: var(--shiki-color-text)">  trim </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> #{{ .Var.with_whitespace | trim | quote }}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  EOF</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./consul_config/consul.hcl&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(n.h3,{children:"file [path]"}),"\n",(0,e.jsx)(n.p,{children:"Reads the contents of a file from the given path"}),"\n",(0,e.jsx)(n.pre,{language:"go",code:'# given a file ./myfile.txt with the contents "foo bar"\n\nfile "./myfile.txt" // would return "foo bar"\n',children:(0,e.jsx)(n.code,{className:"language-go",children:'<span><span style="color: var(--shiki-color-text)"># given a file .</span><span style="color: var(--shiki-token-keyword)">/</span><span style="color: var(--shiki-color-text)">myfile.txt with the contents </span><span style="color: var(--shiki-token-string-expression)">&quot;foo bar&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">file </span><span style="color: var(--shiki-token-string-expression)">&quot;./myfile.txt&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// would return &quot;foo bar&quot;</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(n.h3,{children:"quote [string]"}),"\n",(0,e.jsx)(n.p,{children:"Returns the original string wrapped in quotations, quote can be used with\nthe Go template pipe modifier."}),"\n",(0,e.jsx)(n.pre,{language:"go",code:'// given the string abc\n\nquote "abc" // would return the value "abc"\n',children:(0,e.jsx)(n.code,{className:"language-go",children:'<span><span style="color: var(--shiki-token-comment)">// given the string abc</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">quote </span><span style="color: var(--shiki-token-string-expression)">&quot;abc&quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// would return the value &quot;abc&quot;</span></span>\n<span></span>'})}),"\n",(0,e.jsx)(n.h3,{children:"trim [string]"}),"\n",(0,e.jsx)(n.p,{children:"Removes whitespace such as carrige returns and spaces from the begining and\nthe end of the string, can be used with the Go template pipe modifier."}),"\n",(0,e.jsx)(n.pre,{language:"go",code:'// given the string abc\n\ntrim " abc " // would return the value "abc"\n',children:(0,e.jsx)(n.code,{className:"language-go",children:'<span><span style="color: var(--shiki-token-comment)">// given the string abc</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">trim </span><span style="color: var(--shiki-token-string-expression)">&quot; abc &quot;</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-comment)">// would return the value &quot;abc&quot;</span></span>\n<span></span>'})})]})}var l=!0;function i(s,n){throw Error("Expected "+(n?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),s.components);return n?(0,e.jsx)(n,Object.assign({},s,{children:(0,e.jsx)(r,s)})):r(s)}}},function(s){s.O(0,[9774,2888,179],function(){return s(s.s=1730)}),_N_E=s.O()}]);