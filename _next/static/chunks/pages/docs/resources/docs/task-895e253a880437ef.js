(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8318],{2769:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/docs/task",function(){return n(6482)}])},6482:function(e,s,n){"use strict";n.r(s),n.d(s,{__N_SSG:function(){return i}});var t=n(5893),o=n(1151);function a(e){let s=Object.assign({h1:"h1",code:"code",p:"p",h2:"h2",hr:"hr",h3:"h3",pre:"pre"},(0,o.ah)(),e.components),{Intro:n,Properties:a,Property:i}=s;return n||r("Intro",!0),a||r("Properties",!0),i||r("Property",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.h1,{children:["Task ",(0,t.jsx)(s.code,{children:"task"})]}),"\n",(0,t.jsx)(n,{children:(0,t.jsxs)(s.p,{children:["Describes a task the user needs to perform, which can be included into ",(0,t.jsx)(s.code,{children:"docs"}),".\nTasks can be validated using the ",(0,t.jsx)(s.code,{children:"check"})," defined in the conditions.\nThe task can also be skipped, which will instead run the ",(0,t.jsx)(s.code,{children:"solve"})," to complete the task."]})}),"\n",(0,t.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsxs)(i,{name:"config",type:"#config",value:"",children:[(0,t.jsx)(s.p,{children:"Allows you to specify configuration for the conditions of this task."}),(0,t.jsx)(s.p,{children:"These values can be overridden within the validation of individual conditions."})]}),(0,t.jsxs)(i,{name:"condition",type:"#condition",value:"",children:[(0,t.jsx)(s.p,{children:"Allows you to specify conditions that need to be met in order to complete the task."}),(0,t.jsx)(s.p,{children:"This stanza can be specified multiple times."})]}),(0,t.jsx)(i,{name:"prerequisites",type:"[]string",value:"",children:(0,t.jsxs)(s.p,{children:["A list containing the IDs of ",(0,t.jsx)(s.code,{children:"task"})," resources that need to be completed before the task unlocks."]})})]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{children:"Config"}),"\n",(0,t.jsx)(s.p,{children:"Configuration that will be used for conditions when no values are specified for the validation of individual conditions."}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)(i,{name:"timeout",type:"int",value:"10",children:(0,t.jsx)(s.p,{children:"The number of seconds to wait before timing out the validation."})}),(0,t.jsx)(i,{name:"target",type:"string",value:"",children:(0,t.jsx)(s.p,{children:"The target where the validation should be executed."})}),(0,t.jsx)(i,{name:"user",type:"string",value:"",children:(0,t.jsx)(s.p,{children:"The user the validation should be executed as."})}),(0,t.jsx)(i,{name:"group",type:"string",value:"",children:(0,t.jsx)(s.p,{children:"The group the validation should be executed as."})}),(0,t.jsx)(i,{name:"working_directory",type:"string",value:"",children:(0,t.jsx)(s.p,{children:"The directory the validation should be executed in."})})]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{children:"Condition"}),"\n",(0,t.jsx)(s.p,{children:"Allows you to validate if a user has completed the task."}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)(i,{name:"name",type:"string",required:"true",value:"",children:(0,t.jsx)(s.p,{children:"The name of the condition."})}),(0,t.jsx)(i,{name:"description",type:"string",required:"true",value:"",children:(0,t.jsx)(s.p,{children:"The description of the condition.\nThis is displayed to the user to describe what condition needs to be met."})}),(0,t.jsx)(i,{name:"setup",type:"#validation",value:"",children:(0,t.jsx)(s.p,{children:"The setup will be executed when the task gets unlocked."})}),(0,t.jsx)(i,{name:"cleanup",type:"#validation",value:"",children:(0,t.jsx)(s.p,{children:"The cleanup will be executed when the task gets completed or skipped."})}),(0,t.jsx)(i,{name:"check",type:"#validation",value:"",children:(0,t.jsx)(s.p,{children:"A check that will be executed when validating the condition."})}),(0,t.jsx)(i,{name:"solve",type:"#validation",value:"",children:(0,t.jsx)(s.p,{children:"A solution that will be applied when skipping the condition."})})]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h3,{children:"Validation"}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)(i,{name:"script",type:"string",required:"true",value:"",children:(0,t.jsx)(s.p,{children:"The script that is executed when running the validation."})}),(0,t.jsx)(i,{name:"failure_message",type:"string",required:"true",value:"",children:(0,t.jsx)(s.p,{children:"The message that is returned when the validation of the condition fails."})}),(0,t.jsx)(i,{name:"success_message",type:"string",value:"",children:(0,t.jsx)(s.p,{children:"The message that is returned when the validation of the condition succeeds."})}),(0,t.jsx)(i,{name:"target",type:"string",value:"",children:(0,t.jsx)(s.p,{children:"The target where the validation should be executed."})}),(0,t.jsx)(i,{name:"user",type:"string",value:"",children:(0,t.jsx)(s.p,{children:"The user the validation should be executed as."})}),(0,t.jsx)(i,{name:"group",type:"string",value:"",children:(0,t.jsx)(s.p,{children:"The group the validation should be executed as."})}),(0,t.jsx)(i,{name:"working_directory",type:"string",value:"",children:(0,t.jsx)(s.p,{children:"The directory the validation should be executed in."})})]}),"\n",(0,t.jsx)(s.hr,{}),"\n",(0,t.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(s.pre,{language:"hcl",code:'resource "task" "manual_installation" {\n  prerequisites = []\n  \n  config {\n    user = "root"\n    target = variable.terraform_target\n  }\n\n  condition "binary_exists" {\n    description = "Terraform installed on path"\n\n    check {\n      script = file("checks/installation/manual_installation/binary_exists")\n      failure_message = "terraform binary not found on the PATH"\n    }\n\n    solve {\n      script = file("checks/installation/manual_installation/solve")\n      timeout = 60\n    }\n  }\n\n  condition "latest_version" {\n    description = "Terraform binary is the latest version"\n\n    check {\n      script = template_file("checks/installation/manual_installation/version_latest", { name = "terraform"})\n      failure_message = "terraform binary is not the latest version"\n    }\n  }\n}\n',children:(0,t.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;task&quot; &quot;manual_installation&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  prerequisites </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> []</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">config</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    user </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;root&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    target </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> variable</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">terraform_target</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">condition</span><span style="color: var(--shiki-token-string-expression)"> &quot;binary_exists&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    description </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Terraform installed on path&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> file(</span><span style="color: var(--shiki-token-string-expression)">&quot;checks/installation/manual_installation/binary_exists&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">      failure_message </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;terraform binary not found on the PATH&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">solve</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> file(</span><span style="color: var(--shiki-token-string-expression)">&quot;checks/installation/manual_installation/solve&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">      timeout </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">60</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">condition</span><span style="color: var(--shiki-token-string-expression)"> &quot;latest_version&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    description </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Terraform binary is the latest version&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      script </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> template_file(</span><span style="color: var(--shiki-token-string-expression)">&quot;checks/installation/manual_installation/version_latest&quot;</span><span style="color: var(--shiki-color-text)">, { name = &quot;terraform&quot;})</span></span>\n<span><span style="color: var(--shiki-color-text)">      failure_message </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;terraform binary is not the latest version&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})}var i=!0;function r(e,s){throw Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}s.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,o.ah)(),e.components);return s?(0,t.jsx)(s,Object.assign({},e,{children:(0,t.jsx)(a,e)})):a(e)}}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=2769)}),_N_E=e.O()}]);