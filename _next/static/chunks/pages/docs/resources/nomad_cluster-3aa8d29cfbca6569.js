(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[551],{8932:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/nomad_cluster",function(){return s(5269)}])},5269:function(e,n,s){"use strict";s.r(n),s.d(n,{__N_SSG:function(){return d}});var o=s(5893),r=s(1151),a=s(8691),t=s(7206),i=s(1575),l=s(5312),p=s(6600),c=s(4699);function h(e){let n=Object.assign({h1:"h1",code:"code",p:"p",h2:"h2",pre:"pre",h3:"h3"},(0,r.ah)(),e.components),{Intro:s,YouTube:h,Properties:d,Property:k}=n;return s||u("Intro",!0),d||u("Properties",!0),k||u("Property",!0),h||u("YouTube",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.h1,{children:["Nomad Cluster ",(0,o.jsx)(n.code,{children:"nomad_cluster"})]}),"\n",(0,o.jsx)(s,{children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"nomad_cluster"})," resource allows you to create Nomad clusters as Docker containers. Clusters\ncan either be a single node combined server and client, or comprised of a dedicated server\nand client nodes."]})}),"\n",(0,o.jsx)(h,{id:"o3XD11gx6x4"}),"\n",(0,o.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(d,{children:[(0,o.jsx)(k,{name:"network",type:"#network_attachment",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"Network attaches the container to an existing network defined in a separate stanza.\nThis block can be specified multiple times to attach the container\nto multiple networks."})}),(0,o.jsx)(k,{name:"client_nodes",type:"int",required:"false",value:"0",children:(0,o.jsxs)(n.p,{children:["Number of client nodes to create, if ",(0,o.jsx)(n.code,{children:"0"})," Jumpppad will create a combined\nserver and client. If greater than 0, Jumppad will creeat a dedicated server\nwith ",(0,o.jsx)(n.code,{children:"n"})," clients. ",(0,o.jsx)(n.code,{children:"client_nodes"})," can be updated, if the value changes and the\nuser runs ",(0,o.jsx)(n.code,{children:"jumppad up"}),", jumppad will attempt to nondestructively scale the cluster."]})}),(0,o.jsx)(k,{name:"image",type:"#image",required:"false",value:"",children:(0,o.jsx)(n.p,{children:"Image defines a Docker image to use when creating the container. By default the nomad\ncluster resource will be created using the latest Jumppad container image."})}),(0,o.jsxs)(k,{name:"environment",type:"map[string]string",required:"false",value:"",children:[(0,o.jsx)(n.p,{children:"An env stanza allows you to set environment variables in the container. This stanza can be specified multiple times."}),(0,o.jsx)(n.pre,{language:"hcl",code:'env {\n  key   = "PATH"\n  value = "/usr/local/bin"\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">env</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  key   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;PATH&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/usr/local/bin&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsx)(k,{name:"server_config",type:"string",required:"false",value:"",children:(0,o.jsx)(n.p,{children:"Path to a file containing custom Nomad server config to use when creating\nthe server."})}),(0,o.jsx)(k,{name:"client_config",type:"string",required:"false",value:"",children:(0,o.jsx)(n.p,{children:"Path to a file containing custom Nomad client config to use when creating\nthe server."})}),(0,o.jsx)(k,{name:"consul_config",type:"string",required:"false",value:"",children:(0,o.jsx)(n.p,{children:"Path to a file containing custom Consul agent config  to use when creating\nthe client."})}),(0,o.jsxs)(k,{name:"volume",type:"#volume",required:"false",value:"",children:[(0,o.jsx)(n.p,{children:"Additional volume to mount to the server and client nodes."}),(0,o.jsx)(n.pre,{language:"hcl",code:'volume {\n  source = "./mydirectory"\n  destination = "/path_in_container"\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">volume</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mydirectory&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;/path_in_container&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(k,{name:"copy_image",type:"#image",required:"false",value:"",children:[(0,o.jsx)(n.p,{children:"Docker image in the local Docker image cache to copy to the cluster on creation.\nThis image is added to the Nomad clients docker cache enabling jobs to use\nimages that may not be in the local registry."}),(0,o.jsx)(n.pre,{language:"hcl",code:'copy_image {\n  name = "mylocalimage:versoin"\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">copy_image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;mylocalimage:versoin&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(k,{name:"port",type:"#port",required:"false",value:"",children:[(0,o.jsx)(n.p,{children:"A port stanza allows you to expose container ports on the local network or host. This stanza can be specified multiple times."}),(0,o.jsx)(n.pre,{language:"hcl",code:"port {\n  local = 80\n  host  = 8080\n}\n",children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">port</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  local </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">80</span></span>\n<span><span style="color: var(--shiki-color-text)">  host  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">8080</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(k,{name:"port_range",type:"#port_range",required:"false",value:"",children:[(0,o.jsx)(n.p,{children:"A port_range stanza allows you to expose a range of container ports on the local network or host. This stanza can be specified multiple times."}),(0,o.jsx)(n.p,{children:"The following example would create 11 ports from 80 to 90 (inclusive) and expose them to the host machine."}),(0,o.jsx)(n.pre,{language:"hcl",code:'port {\n  range       = "80-90"\n  enable_host = true\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">port</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  range       </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;80-90&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  enable_host </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">true</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsx)(k,{name:"api_port",type:"int",required:"false",value:"4646",children:(0,o.jsxs)(n.p,{children:["Port to expose the Nomad API on the host. By default this uses the standard\nnomad port ",(0,o.jsx)(n.code,{children:"4646"}),"; however, if you are running multiple nomad instances\nyou will need to override this value."]})}),(0,o.jsx)(k,{name:"connector_port",type:"int",required:"false",value:"",readonly:!0,children:(0,o.jsxs)(n.p,{children:["The port where the Jumppad connector is exposed to the host, this property\nis requied by the ",(0,o.jsx)(n.code,{children:"ingress"})," resource and is not generally needed when\nbuilding blueprints."]})}),(0,o.jsx)(k,{name:"config_dir",type:"string",required:"false",value:"",readonly:!0,children:(0,o.jsx)(n.p,{children:"Local directory where the server and client configuration is stored."})}),(0,o.jsxs)(k,{name:"server_fqrn",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsx)(n.p,{children:"The fully qualified resource name for the Nomad server, this value can be\nused to address the server from the Docker network. It is also the name\nof the Docker container."}),(0,o.jsx)(n.pre,{code:"  server.name.nomad-cluster.jumpad.dev\n",children:(0,o.jsx)(n.code,{children:"  server.name.nomad-cluster.jumpad.dev\n"})})]}),(0,o.jsxs)(k,{name:"client_fqrn",type:"[]string",required:"false",value:"",readonly:!0,children:[(0,o.jsx)(n.p,{children:"The fully qualified resource names for the Nomad clients, this value can be\nused to address the client from the Docker network. It is also the name\nof the Docker container."}),(0,o.jsxs)(n.p,{children:["When ",(0,o.jsx)(n.code,{children:"client_nodes"})," is set to ",(0,o.jsx)(n.code,{children:"0"})," this property will have no value."]}),(0,o.jsx)(n.pre,{code:"[\n  abse42wsdff.client.name.nomad-cluster.jumpad.dev,\n  kjdf23123.client.name.nomad-cluster.jumpad.dev,\n  123dfkjs.client.name.nomad-cluster.jumpad.dev,\n]\n",children:(0,o.jsx)(n.code,{children:"[\n  abse42wsdff.client.name.nomad-cluster.jumpad.dev,\n  kjdf23123.client.name.nomad-cluster.jumpad.dev,\n  123dfkjs.client.name.nomad-cluster.jumpad.dev,\n]\n"})})]}),(0,o.jsxs)(k,{name:"external_ip",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsxs)(n.p,{children:["Local IP address of the Nomad server, this property can be used to set the\n",(0,o.jsx)(n.code,{children:"NOAMD_ADDR"})," on the Jumppad client."]}),(0,o.jsx)(n.pre,{language:"hcl",code:'  output "NOMAD_ADDR" {\n    value = "http://${resource.nomad_cluster.dev.external_ip}:${resource.nomad_cluster.dev.api_port}"\n  }\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">output</span><span style="color: var(--shiki-token-string-expression)"> &quot;NOMAD_ADDR&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http://</span><span style="color: var(--shiki-token-keyword)">${resource</span><span style="color: var(--shiki-token-function)">.nomad_cluster.dev.external_ip</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">:</span><span style="color: var(--shiki-token-keyword)">${resource</span><span style="color: var(--shiki-token-function)">.nomad_cluster.dev.api_port</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]})]}),"\n",(0,o.jsx)(t.default,{}),"\n",(0,o.jsx)(i.default,{}),"\n",(0,o.jsx)(l.default,{}),"\n",(0,o.jsx)(p.default,{}),"\n",(0,o.jsx)(c.default,{}),"\n",(0,o.jsx)(a.default,{}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h3,{children:"Minimal example"}),"\n",(0,o.jsx)(n.p,{children:"The following example creates a combined client and server running in a\nsingle container."}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'network "cloud" {\n    subnet = "10.0.0.0/16"\n}\n\nresource "nomad_cluster" "dev" {\n  network {\n    id = resource.network.cloud.id\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-token-string-expression)"> &quot;cloud&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    subnet </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;10.0.0.0/16&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;nomad_cluster&quot; &quot;dev&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">network</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">cloud</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h3,{children:"Full Example"}),"\n",(0,o.jsx)(n.p,{children:"The following example creates a multi_node nomad cluster with a job and\ningress."}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'network "cloud" {\n    subnet = "10.0.0.0/16"\n}\n\nresource "nomad_cluster" "dev" {\n  client_nodes=3\n\n  network {\n    id = resource.network.cloud.id\n  }\n}\n\nresource "nomad_job" "example_1" {\n  cluster = resource.nomad_cluster.dev.id\n\n  paths = ["./app_config/example1.nomad"]\n\n  health_check {\n    timeout    = "60s"\n    nomad_jobs = ["example_1"]\n  }\n}\n\nresource "ingress" "fake_service_1" {\n  port = 19090\n\n  target {\n    id         = resource.nomad_cluster.dev.id\n    named_port = "http"\n\n    config = {\n      job   = "example_1"\n      group = "fake_service"\n      task  = "fake_service"\n    }\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-token-string-expression)"> &quot;cloud&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    subnet </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;10.0.0.0/16&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;nomad_cluster&quot; &quot;dev&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  client_nodes</span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-token-constant)">3</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">network</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">cloud</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;nomad_job&quot; &quot;example_1&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  cluster </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">nomad_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">dev</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  paths </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;./app_config/example1.nomad&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">health_check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    timeout    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;60s&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    nomad_jobs </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;example_1&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;ingress&quot; &quot;fake_service_1&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">19090</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">target</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id         </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">nomad_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">dev</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">    named_port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    config </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      job   = &quot;example_1&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      group = &quot;fake_service&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      task  = &quot;fake_service&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})}var d=!0;function u(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(h,e)})):h(e)}},1575:function(e,n,s){"use strict";s.r(n),s.d(n,{__N_SSG:function(){return t}});var o=s(5893),r=s(1151);function a(e){let n=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",pre:"pre"},(0,r.ah)(),e.components),{Properties:s,Property:a}=n;return s||i("Properties",!0),a||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"image",children:"image"}),"\n",(0,o.jsx)(n.p,{children:"Image defines a Docker image used when creating this container. An Image can be stored in a public or a private repository."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)(a,{name:"name",type:"string",required:"true",value:"",children:(0,o.jsxs)(n.p,{children:["Name of the image to use when creating the container, can either be the full canonical name or short name for Docker official images.\ne.g. ",(0,o.jsx)(n.code,{children:"consul:v1.6.1"})," or ",(0,o.jsx)(n.code,{children:"docker.io/consul:v1.6.1"}),"."]})}),(0,o.jsx)(a,{name:"username",type:"string",required:"false",value:"",children:(0,o.jsx)(n.p,{children:"Username to use when connecting to a private image repository"})}),(0,o.jsxs)(a,{name:"password",type:"string",required:"false",value:"",children:[(0,o.jsx)(n.p,{children:"Password to use when connecting to a private image repository, for both username and password interpolated environment variables can be used\nin place of static values."}),(0,o.jsx)(n.pre,{language:"hcl",code:'image {\n  name = "myregistry.io/myimage:latest"\n  username = env("REGISTRY_USERNAME")\n  password = env("REGISTRY_PASSWORD")\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;myregistry.io/myimage:latest&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  username </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> env(</span><span style="color: var(--shiki-token-string-expression)">&quot;REGISTRY_USERNAME&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">  password </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> env(</span><span style="color: var(--shiki-token-string-expression)">&quot;REGISTRY_PASSWORD&quot;</span><span style="color: var(--shiki-color-text)">)</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})]})]})}var t=!0;function i(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}},8691:function(e,n,s){"use strict";s.r(n),s.d(n,{__N_SSG:function(){return t}});var o=s(5893),r=s(1151);function a(e){let n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",em:"em"},(0,r.ah)(),e.components),{Properties:s,Property:a}=n;return s||i("Properties",!0),a||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"meta_properties",children:"Meta Properties"}),"\n",(0,o.jsx)(n.p,{children:"All jumppad resources have the following read only properties."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsxs)(a,{name:"depends_on",type:"[]string",required:"false",value:"",children:[(0,o.jsxs)(n.p,{children:["An array of resources that this resource depends on. Jumppad will ensure that\nall resources referenced in ",(0,o.jsx)(n.code,{children:"depends_on"})," are created before the resource."]}),(0,o.jsx)(n.p,{children:'For example, the resource "mine" would be created after the resource "myother".'}),(0,o.jsx)(n.pre,{language:"hcl",code:'  resource "container" "mine" {\n    depends_on = ["resource.container.myother"]\n  }\n  \n  resource "container" "myother" {\n\n  }\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    depends_on </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;resource.container.myother&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;myother&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})}),(0,o.jsxs)(n.p,{children:["Where possible Jumppad attempts to automatically create a dependency graph\nby using interpolated properties. For example, the previous scenario could\nhave been written without using ",(0,o.jsx)(n.code,{children:"depends_on"})," by using interpolated properties."]}),(0,o.jsx)(n.pre,{language:"hcl",code:'  resource "container" "mine" {\n    image {\n      name = resource.container.myother.image.name\n    }\n  }\n  \n  resource "container" "myother" {\n    image {\n      name = "myimage:version"\n    }\n  }\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">container</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">myother</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">image</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">name</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;myother&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;myimage:version&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsx)(a,{name:"disabled",type:"bool",required:"false",value:"false",children:(0,o.jsx)(n.p,{children:"If set to false the resource will not be created."})}),(0,o.jsxs)(a,{name:"id",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsxs)(n.p,{children:["The unique ",(0,o.jsx)(n.code,{children:"id"})," for the resource, this value can be used in interpolation\nsyntax to reference properties for a resource."]}),(0,o.jsx)(n.pre,{code:"  resource.container.nic\n  ouput.myoutput\n  module.mine.submodule.resource.container.nic\n  module.mine.submodule.ouput.myoutput\n\n",children:(0,o.jsx)(n.code,{children:"  resource.container.nic\n  ouput.myoutput\n  module.mine.submodule.resource.container.nic\n  module.mine.submodule.ouput.myoutput\n\n"})})]}),(0,o.jsxs)(a,{name:"name",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsxs)(n.p,{children:["The name of the resource, ",(0,o.jsx)(n.em,{children:"note:"})," this value is not unique and does not\ntake into account if the resource is embedded in a module."]}),(0,o.jsxs)(n.p,{children:["This value is the same as the ",(0,o.jsx)(n.code,{children:"name"}),' field of the resource. i.e "mine".']}),(0,o.jsx)(n.pre,{language:"hcl",code:'  resource "container" "mine" {}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(a,{name:"type",type:"string",required:"true",value:"",readonly:!0,children:[(0,o.jsx)(n.p,{children:"The string type of the resource."}),(0,o.jsxs)(n.p,{children:["This value is the same as the ",(0,o.jsx)(n.code,{children:"type"}),' field of the resource. i.e. "container"']}),(0,o.jsx)(n.pre,{language:"hcl",code:'  resource "container" "mine" {}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(a,{name:"module",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsx)(n.p,{children:"The full module path for the resource. Should the resource be included\nin a module, this value will be the name of the module and any parent\nmodules that the resource is embedded in."}),(0,o.jsxs)(n.p,{children:["For example, given the following structure, the ",(0,o.jsx)(n.code,{children:"module"}),' value would be\n"mymodule.mysubmodule".']}),(0,o.jsx)(n.pre,{language:"hcl",code:'  resource "container" "mine" {}\n\n  ## included in\n\n  module "mysubmodule" {}\n  \n  ## included in\n\n  module "mymodule" {}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">## included in</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">module</span><span style="color: var(--shiki-token-string-expression)"> &quot;mysubmodule&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">## included in</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">module</span><span style="color: var(--shiki-token-string-expression)"> &quot;mymodule&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>'})})]}),(0,o.jsx)(a,{name:"file",type:"string",required:"false",value:"",readonly:!0,children:(0,o.jsx)(n.p,{children:"The absolute path of the file that contains this resource"})})]})]})}var t=!0;function i(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}},7206:function(e,n,s){"use strict";s.r(n),s.d(n,{__N_SSG:function(){return t}});var o=s(5893),r=s(1151);function a(e){let n=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",pre:"pre"},(0,r.ah)(),e.components),{Properties:s,Property:a}=n;return s||i("Properties",!0),a||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"network_attachment",children:"network_attachment"}),"\n",(0,o.jsx)(n.p,{children:"Network attachment defines a network to which the container is attached."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsxs)(a,{name:"id",type:"string",required:"true",value:"",children:[(0,o.jsxs)(n.p,{children:["ID of the network to attach the container to, specified in reference format. e.g. to attach to a network called ",(0,o.jsx)(n.code,{children:"cloud"})]}),(0,o.jsx)(n.pre,{language:"hcl",code:'network {\n  id = "network.cloud"\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;network.cloud&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsx)(a,{name:"ip_address",type:"string",required:"false",value:"",children:(0,o.jsx)(n.p,{children:"Static IP address to assign container for the network, the ip address must be within range defined by the network subnet.\nIf this parameter is omitted an IP address will be automatically assigned."})}),(0,o.jsxs)(a,{name:"aliases",type:"[]string",required:"false",value:"",children:[(0,o.jsxs)(n.p,{children:["Aliases allow alternate names to specified for the container. Aliases can be used to reference a container across the network, the container\nwill respond to ping and other network resolution using the primary assigned name ",(0,o.jsx)(n.code,{children:"[name].container.shipyard.run"})," and the aliases."]}),(0,o.jsx)(n.pre,{language:"hcl",code:'network {\n  name    = "network.cloud"\n  aliases = [\n    "alt1.container.shipyard.run", \n    "alt2.container.shipyard.run"\n  ]\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  name    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;network.cloud&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  aliases </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;alt1.container.shipyard.run&quot;</span><span style="color: var(--shiki-color-text)">, </span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-string-expression)">&quot;alt2.container.shipyard.run&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  ]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]}),(0,o.jsx)(a,{name:"name",type:"string",required:"false",value:"",readonly:!0,children:(0,o.jsx)(n.p,{children:"Name will equal the name of the network as created by jumppad."})})]})]})}var t=!0;function i(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}},6600:function(e,n,s){"use strict";s.r(n),s.d(n,{__N_SSG:function(){return t}});var o=s(5893),r=s(1151);function a(e){let n=Object.assign({hr:"hr",h2:"h2",p:"p"},(0,r.ah)(),e.components),{Properties:s,Property:a}=n;return s||i("Properties",!0),a||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"port",children:"port"}),"\n",(0,o.jsx)(n.p,{children:"A port stanza defines host to container communications"}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)(a,{name:"local",type:"string",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"The local port in the container."})}),(0,o.jsx)(a,{name:"host",type:"string",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"The host port to map the local port to."})}),(0,o.jsx)(a,{name:"protocol",type:"string",required:"false",value:"",children:(0,o.jsx)(n.p,{children:'The protocol to use when exposing the port, can be "tcp", or "udp".'})}),(0,o.jsx)(a,{name:"open_in_browser",type:"string",required:"false",value:"/",children:(0,o.jsx)(n.p,{children:"Should a browser window be automatically opened when this resource is created. Browser windows will open at the path specified by this property."})})]})]})}var t=!0;function i(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}},4699:function(e,n,s){"use strict";s.r(n),s.d(n,{__N_SSG:function(){return t}});var o=s(5893),r=s(1151);function a(e){let n=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code"},(0,r.ah)(),e.components),{Properties:s,Property:a}=n;return s||i("Properties",!0),a||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"port_range",children:"port_range"}),"\n",(0,o.jsx)(n.p,{children:"A port_range stanza defines host to container communications by exposing a range of ports for the container."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)(a,{name:"range",type:"string",required:"true",value:"",children:(0,o.jsxs)(n.p,{children:["The port range to expose, e.g, ",(0,o.jsx)(n.code,{children:"8080-8082"})," would expose the ports ",(0,o.jsx)(n.code,{children:"8080"}),", ",(0,o.jsx)(n.code,{children:"8081"}),", ",(0,o.jsx)(n.code,{children:"8082"}),"."]})}),(0,o.jsx)(a,{name:"enable_host",type:"boolean",required:"false",value:"false",children:(0,o.jsx)(n.p,{children:"The host port to map the local port to."})}),(0,o.jsx)(a,{name:"protocol",type:"string",required:"false",value:"tcp",children:(0,o.jsx)(n.p,{children:'The protocol to use when exposing the port, can be "tcp", or "udp".'})})]})]})}var t=!0;function i(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}},5312:function(e,n,s){"use strict";s.r(n),s.d(n,{__N_SSG:function(){return t}});var o=s(5893),r=s(1151);function a(e){let n=Object.assign({hr:"hr",h2:"h2",p:"p",code:"code",ul:"ul",li:"li",a:"a"},(0,r.ah)(),e.components),{Properties:s,Property:a}=n;return s||i("Properties",!0),a||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"volume",children:"volume"}),"\n",(0,o.jsx)(n.p,{children:"A volume type allows the specification of an attached volume."}),"\n",(0,o.jsxs)(s,{children:[(0,o.jsx)(a,{name:"source",type:"string",required:"true",value:"",children:(0,o.jsxs)(n.p,{children:["The source volume to mount in the container, can be specified as a relative ",(0,o.jsx)(n.code,{children:"./"})," or absolute path ",(0,o.jsx)(n.code,{children:"/usr/local/bin"}),". Relative paths are relative to\nthe file declaring the container."]})}),(0,o.jsx)(a,{name:"destination",type:"string",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"The destination in the container to mount the volume to, must be an absolute path."})}),(0,o.jsxs)(a,{name:"type",type:"string",required:"false",value:"bind",children:[(0,o.jsx)(n.p,{children:"The type of the mount, can be one of the following values:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"bind: bind the source path to the destination path in the container"}),"\n",(0,o.jsx)(n.li,{children:"volume: source is a Docker volume"}),"\n",(0,o.jsx)(n.li,{children:"tmpfs: create a temporary filesystem"}),"\n"]})]}),(0,o.jsxs)(a,{name:"bind_propagation",type:"string",required:"false",value:"rprivate",children:[(0,o.jsx)(n.p,{children:"Configures bind propagation for Docker volume mounts, only applies to bind mounts, can be one of the following values:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"shared"}),"\n",(0,o.jsx)(n.li,{children:"slave"}),"\n",(0,o.jsx)(n.li,{children:"private"}),"\n",(0,o.jsx)(n.li,{children:"rslave"}),"\n",(0,o.jsx)(n.li,{children:"rprivate"}),"\n"]}),(0,o.jsxs)(n.p,{children:["For more information please see the Docker documentation ",(0,o.jsx)(n.a,{href:"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation",children:"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation"})]})]}),(0,o.jsxs)(a,{name:"bind_propagation_non_recursive",type:"boolean",required:"false",value:"false",children:[(0,o.jsx)(n.p,{children:"We are going to be 100% honest, we have no idea what this option does, but it is a thing so we made it configuable.\nWould love a PR if you actually know how this is supposed to work."}),(0,o.jsxs)(n.p,{children:["For more information please see the Docker documentation ",(0,o.jsx)(n.a,{href:"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation",children:"https://docs.docker.com/storage/bind-mounts/#configure-bind-propagation"})]})]})]})]})}var t=!0;function i(e,n){throw Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,o.jsx)(n,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}}},function(e){e.O(0,[774,888,179],function(){return e(e.s=8932)}),_N_E=e.O()}]);