(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7409],{4489:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/ingress",function(){return n(6957)}])},6957:function(e,s,n){"use strict";n.r(s),n.d(s,{__N_SSG:function(){return i}});var r=n(5893),o=n(1151),a=n(8691);function t(e){let s=Object.assign({h1:"h1",code:"code",p:"p",h2:"h2",hr:"hr",strong:"strong",pre:"pre",h3:"h3"},(0,o.ah)(),e.components),{Intro:n,Properties:t,Property:i}=s;return n||p("Intro",!0),t||p("Properties",!0),i||p("Property",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(s.h1,{children:["Ingress ",(0,r.jsx)(s.code,{children:"ingress"})]}),"\n",(0,r.jsx)(n,{children:(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"ingress"})," resource allows you to expose services in Kubernetes and Nomad\ntasks to the local machine."]})}),"\n",(0,r.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)(i,{name:"port",type:"int",required:"true",value:"",children:(0,r.jsx)(s.p,{children:"The local port to expose the service on."})}),(0,r.jsx)(i,{name:"target",type:"#traffic_target",required:"true",value:"",children:(0,r.jsx)(s.p,{children:"The target for the ingress."})}),(0,r.jsx)(i,{name:"ingress_id",type:"string",required:"false",value:"",readonly:!0,children:(0,r.jsx)(s.p,{children:"The unique identifier for the created ingress."})}),(0,r.jsxs)(i,{name:"address",type:"string",required:"false",value:"",readonly:!0,children:[(0,r.jsx)(s.p,{children:"The full address where the ingress can be reached from the local network."}),(0,r.jsx)(s.p,{children:"Generally this is the local ip address of the machine running Jumppad and the\nport where the service is exposed."})]})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"traffic_target",children:"traffic_target"}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)(i,{name:"id",type:"string",required:"true",value:"",children:(0,r.jsxs)(s.p,{children:["The id of the ",(0,r.jsx)(s.code,{children:"nomad_cluster"})," or ",(0,r.jsx)(s.code,{children:"kubernetes_cluster"})," resource."]})}),(0,r.jsxs)(i,{name:"port",type:"int",required:"true",value:"",children:[(0,r.jsx)(s.p,{children:"The numerical reference for the target service port."}),(0,r.jsxs)(s.p,{children:["Either ",(0,r.jsx)(s.code,{children:"port"})," or ",(0,r.jsx)(s.code,{children:"named_port"})," must be specified."]})]}),(0,r.jsxs)(i,{name:"named_port",type:"string",required:"true",value:"",children:[(0,r.jsx)(s.p,{children:"The streing reference for the target service port."}),(0,r.jsxs)(s.p,{children:["Either ",(0,r.jsx)(s.code,{children:"port"})," or ",(0,r.jsx)(s.code,{children:"named_port"})," must be specified."]})]}),(0,r.jsxs)(i,{name:"config",type:"map[string]string",required:"true",value:"",children:[(0,r.jsx)(s.p,{children:"The configuration parameters for the ingress, configuration parameters\ndiffer depending on the target type."}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Kubernetes target config"})}),(0,r.jsx)(s.pre,{language:"hcl",code:'  service   = "Kubernetes service name" \n  namespace = "Kubernetes namespace where the service is deployed"\n',children:(0,r.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  service   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Kubernetes service name&quot;</span><span style="color: var(--shiki-color-text)"> </span></span>\n<span><span style="color: var(--shiki-color-text)">  namespace </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Kubernetes namespace where the service is deployed&quot;</span></span>\n<span></span>'})}),(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Nomad target config"})}),(0,r.jsx)(s.pre,{language:"hcl",code:'  job   = "Name of the Nomad job" \n  group = "Group in the job"\n  task  = "Name of the task in the group"\n',children:(0,r.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  job   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Name of the Nomad job&quot;</span><span style="color: var(--shiki-color-text)"> </span></span>\n<span><span style="color: var(--shiki-color-text)">  group </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Group in the job&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  task  </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;Name of the task in the group&quot;</span></span>\n<span></span>'})})]})]}),"\n",(0,r.jsx)(a.default,{}),"\n",(0,r.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(s.h3,{children:"Nomad Ingress"}),"\n",(0,r.jsxs)(s.p,{children:["Exposes the the ",(0,r.jsx)(s.code,{children:"http"})," port for the task ",(0,r.jsx)(s.code,{children:"fake_service"})," in the group ",(0,r.jsx)(s.code,{children:"fake_service"}),"\nin the job ",(0,r.jsx)(s.code,{children:"example_1"})," locally on port ",(0,r.jsx)(s.code,{children:"19090"})]}),"\n",(0,r.jsx)(s.pre,{language:"hcl",code:'resource "ingress" "fake_service_1" {\n  port = 19090\n\n  target {\n    id         = resource.nomad_cluster.dev.id\n    named_port = "http"\n\n    config = {\n      job   = "example_1"\n      group = "fake_service"\n      task  = "fake_service"\n    }\n  }\n}\n',children:(0,r.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;ingress&quot; &quot;fake_service_1&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">19090</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">target</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id         </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">nomad_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">dev</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">    named_port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;http&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    config </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      job   = &quot;example_1&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      group = &quot;fake_service&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      task  = &quot;fake_service&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,r.jsx)(s.h3,{children:"Kubernets Ingress"}),"\n",(0,r.jsxs)(s.p,{children:["Exposes the Kubernets port ",(0,r.jsx)(s.code,{children:"9090"})," for the Kubernetes service ",(0,r.jsx)(s.code,{children:"fake-service"}),"\nin the ",(0,r.jsx)(s.code,{children:"default"})," namespace locally on port ",(0,r.jsx)(s.code,{children:"19090"}),"."]}),"\n",(0,r.jsx)(s.pre,{language:"hcl",code:'resource "ingress" "fake_service_1" {\n  port = 19090\n\n  target {\n    id   = resource.k8s_cluster.k3s.id\n    port = 9090\n\n    config = {\n      service   = "fake-service"\n      namespace = "default"\n    }\n  }\n}\n',children:(0,r.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;ingress&quot; &quot;fake_service_1&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">19090</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">target</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id   </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k8s_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">k3s</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">    port </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-constant)">9090</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">    config </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      service   = &quot;fake-service&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">      namespace = &quot;default&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})}var i=!0;function p(e,s){throw Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}s.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,o.ah)(),e.components);return s?(0,r.jsx)(s,Object.assign({},e,{children:(0,r.jsx)(t,e)})):t(e)}},8691:function(e,s,n){"use strict";n.r(s),n.d(s,{__N_SSG:function(){return t}});var r=n(5893),o=n(1151);function a(e){let s=Object.assign({h2:"h2",p:"p",code:"code",a:"a"},(0,o.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"meta_properties",children:"Meta Properties"}),"\n",(0,r.jsxs)(s.p,{children:["In addition to the main properties, all resources have meta properties, such\nas the ",(0,r.jsx)(s.code,{children:"id"})," of the resource. To see the list of these properties please see the\n",(0,r.jsx)(s.code,{children:"Meta Properties"})," section in the documentation ",(0,r.jsx)(s.a,{href:"/docs/resources/meta",children:"/docs/resources/meta"}),"."]})]})}var t=!0;s.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,o.ah)(),e.components);return s?(0,r.jsx)(s,Object.assign({},e,{children:(0,r.jsx)(a,e)})):a(e)}}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=4489)}),_N_E=e.O()}]);