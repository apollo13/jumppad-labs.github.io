(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3356],{4355:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/nomad_job",function(){return n(3917)}])},3917:function(e,s,n){"use strict";n.r(s),n.d(s,{__N_SSG:function(){return l}});var o=n(5893),a=n(1151),r=n(8691);function t(e){let s=Object.assign({h1:"h1",code:"code",p:"p",h2:"h2",pre:"pre",hr:"hr"},(0,a.ah)(),e.components),{Intro:n,Properties:t,Property:l}=s;return n||i("Intro",!0),t||i("Properties",!0),l||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(s.h1,{children:["Nomad Job ",(0,o.jsx)(s.code,{children:"nomad_job"})]}),"\n",(0,o.jsx)(n,{children:(0,o.jsxs)(s.p,{children:["The ",(0,o.jsx)(s.code,{children:"nomad_job"})," resource allows you to apply one or more Nomad job files to\na cluster."]})}),"\n",(0,o.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsxs)(l,{name:"cluster",type:"string",required:"true",value:"",children:[(0,o.jsxs)(s.p,{children:["The id of the cluster to apply the jobs to. Commonly this is set using\nthe interpolated value ",(0,o.jsx)(s.code,{children:"id"})," from the cluster. Setting the cluster id this\nway ensures that the cluster is created and healthy before any jobs are\napplied."]}),(0,o.jsx)(s.pre,{language:"hcl",code:'  resource "nomad_job" "example" {\n    cluster = resource.nomad_cluster.dev.id\n    ...\n  }\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;nomad_job&quot; &quot;example&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    cluster </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">nomad_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">dev</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">    ...</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsx)(l,{name:"pahts",type:"[]string",required:"true",value:"",children:(0,o.jsx)(s.p,{children:"Paths to the Nomad job files to apply to the cluster."})}),(0,o.jsx)(l,{name:"paths",type:"#health_check",required:"false",value:"",children:(0,o.jsx)(s.p,{children:"Optional health check to perform after the jobs have been applied, this resource\nwill not complete until the health checks are passing."})})]}),"\n",(0,o.jsx)(s.hr,{}),"\n",(0,o.jsx)(s.h2,{id:"health_check",children:"health_check"}),"\n",(0,o.jsx)(s.p,{children:"A health_check stanza allows the definition of a health check which must pass before the resource is marked as successfully created."}),"\n",(0,o.jsx)(s.pre,{language:"hcl",code:'health_check {\n  duration = "60s"\n  nomad_jobs = ["example"]\n}\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">health_check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  duration </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;60s&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  nomad_jobs </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;example&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)(l,{name:"timeout",type:"duration",required:"true",value:"",children:(0,o.jsxs)(s.p,{children:["The maximum duration to wait before marking the health check as failed.\nExpressed as a Go duration, e.g. ",(0,o.jsx)(s.code,{children:"1s"})," = 1 second, ",(0,o.jsx)(s.code,{children:"100ms"})," = 100 milliseconds."]})}),(0,o.jsx)(l,{name:"nomad_jobs",type:"[]string",required:"true",value:"",children:(0,o.jsx)(s.p,{children:'An array of nomad jobs that must be marked as "Running" by the Nomad\nserver.'})})]}),"\n",(0,o.jsx)(r.default,{}),"\n",(0,o.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(s.pre,{language:"hcl",code:'resource "nomad_cluster" "dev" {\n  network {\n    id = resource.network.cloud.id\n  }\n}\n\nresource "nomad_job" "example" {\n  cluster = resource.nomad_cluster.dev.id\n\n  paths = ["./app_config/example1.nomad"]\n\n  health_check {\n    timeout    = "60s"\n    nomad_jobs = ["example"]\n  }\n}\n\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;nomad_cluster&quot; &quot;dev&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">network</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    id </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">network</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">cloud</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;nomad_job&quot; &quot;example&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  cluster </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">nomad_cluster</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">dev</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">id</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  paths </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;./app_config/example1.nomad&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">health_check</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    timeout    </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;60s&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    nomad_jobs </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;example&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span></span>'})})]})}var l=!0;function i(e,s){throw Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}s.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,a.ah)(),e.components);return s?(0,o.jsx)(s,Object.assign({},e,{children:(0,o.jsx)(t,e)})):t(e)}},8691:function(e,s,n){"use strict";n.r(s),n.d(s,{__N_SSG:function(){return t}});var o=n(5893),a=n(1151);function r(e){let s=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",em:"em"},(0,a.ah)(),e.components),{Properties:n,Property:r}=s;return n||l("Properties",!0),r||l("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.h2,{id:"meta_properties",children:"Meta Properties"}),"\n",(0,o.jsx)(s.p,{children:"All jumppad resources have the following read only properties."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsxs)(r,{name:"depends_on",type:"[]string",required:"false",value:"",children:[(0,o.jsxs)(s.p,{children:["An array of resources that this resource depends on. Jumppad will ensure that\nall resources referenced in ",(0,o.jsx)(s.code,{children:"depends_on"})," are created before the resource."]}),(0,o.jsx)(s.p,{children:'For example, the resource "mine" would be created after the resource "myother".'}),(0,o.jsx)(s.pre,{language:"hcl",code:'  resource "container" "mine" {\n    depends_on = ["resource.container.myother"]\n  }\n  \n  resource "container" "myother" {\n\n  }\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    depends_on </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;resource.container.myother&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;myother&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})}),(0,o.jsxs)(s.p,{children:["Where possible Jumppad attempts to automatically create a dependency graph\nby using interpolated properties. For example, the previous scenario could\nhave been written without using ",(0,o.jsx)(s.code,{children:"depends_on"})," by using interpolated properties."]}),(0,o.jsx)(s.pre,{language:"hcl",code:'  resource "container" "mine" {\n    image {\n      name = resource.container.myother.image.name\n    }\n  }\n  \n  resource "container" "myother" {\n    image {\n      name = "myimage:version"\n    }\n  }\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">container</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">myother</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">image</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">name</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;myother&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;myimage:version&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsx)(r,{name:"disabled",type:"bool",required:"false",value:"false",children:(0,o.jsx)(s.p,{children:"If set to false the resource will not be created."})}),(0,o.jsxs)(r,{name:"id",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsxs)(s.p,{children:["The unique ",(0,o.jsx)(s.code,{children:"id"})," for the resource, this value can be used in interpolation\nsyntax to reference properties for a resource."]}),(0,o.jsx)(s.pre,{code:"  resource.container.nic\n  ouput.myoutput\n  module.mine.submodule.resource.container.nic\n  module.mine.submodule.ouput.myoutput\n\n",children:(0,o.jsx)(s.code,{children:"  resource.container.nic\n  ouput.myoutput\n  module.mine.submodule.resource.container.nic\n  module.mine.submodule.ouput.myoutput\n\n"})})]}),(0,o.jsxs)(r,{name:"name",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsxs)(s.p,{children:["The name of the resource, ",(0,o.jsx)(s.em,{children:"note:"})," this value is not unique and does not\ntake into account if the resource is embedded in a module."]}),(0,o.jsxs)(s.p,{children:["This value is the same as the ",(0,o.jsx)(s.code,{children:"name"}),' field of the resource. i.e "mine".']}),(0,o.jsx)(s.pre,{language:"hcl",code:'  resource "container" "mine" {}\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(r,{name:"type",type:"string",required:"true",value:"",readonly:!0,children:[(0,o.jsx)(s.p,{children:"The string type of the resource."}),(0,o.jsxs)(s.p,{children:["This value is the same as the ",(0,o.jsx)(s.code,{children:"type"}),' field of the resource. i.e. "container"']}),(0,o.jsx)(s.pre,{language:"hcl",code:'  resource "container" "mine" {}\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(r,{name:"module",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsx)(s.p,{children:"The full module path for the resource. Should the resource be included\nin a module, this value will be the name of the module and any parent\nmodules that the resource is embedded in."}),(0,o.jsxs)(s.p,{children:["For example, given the following structure, the ",(0,o.jsx)(s.code,{children:"module"}),' value would be\n"mymodule.mysubmodule".']}),(0,o.jsx)(s.pre,{language:"hcl",code:'  resource "container" "mine" {}\n\n  ## included in\n\n  module "mysubmodule" {}\n  \n  ## included in\n\n  module "mymodule" {}\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">## included in</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">module</span><span style="color: var(--shiki-token-string-expression)"> &quot;mysubmodule&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">## included in</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">module</span><span style="color: var(--shiki-token-string-expression)"> &quot;mymodule&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>'})})]}),(0,o.jsx)(r,{name:"file",type:"string",required:"false",value:"",readonly:!0,children:(0,o.jsx)(s.p,{children:"The absolute path of the file that contains this resource"})})]})]})}var t=!0;function l(e,s){throw Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}s.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,a.ah)(),e.components);return s?(0,o.jsx)(s,Object.assign({},e,{children:(0,o.jsx)(r,e)})):r(e)}}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=4355)}),_N_E=e.O()}]);