(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3999],{6814:function(e,s,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/module",function(){return n(1744)}])},1744:function(e,s,n){"use strict";n.r(s),n.d(s,{__N_SSG:function(){return l}});var o=n(5893),r=n(1151),a=n(8691);function t(e){let s=Object.assign({h1:"h1",code:"code",p:"p",h2:"h2",pre:"pre",h3:"h3"},(0,r.ah)(),e.components),{Intro:n,Properties:t,Property:l}=s;return n||i("Intro",!0),t||i("Properties",!0),l||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(s.h1,{children:["Module ",(0,o.jsx)(s.code,{children:"module"})]}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsxs)(s.p,{children:["The ",(0,o.jsx)(s.code,{children:"module"})," resource allows a blueprint to reference other files or blueprints.\nBlueprints can be referenced from the local file system or from GitHub repositories."]}),(0,o.jsxs)(s.p,{children:["All resources contained within a module are scoped to the name of the containing\nmodule. For example, if a module ",(0,o.jsx)(s.code,{children:"mine"})," contains a kubernetes cluster called ",(0,o.jsx)(s.code,{children:"dev"}),"\nthen the FQRN and the name within docker would be:"]}),(0,o.jsx)(s.p,{children:(0,o.jsx)(s.code,{children:"server.dev.mine.k8s-cluster.jumppad.dev"})}),(0,o.jsx)(s.p,{children:"Modules can also contain modules, to ensure that resouce references are unique\nresources always take on the name of their module including any parent modules."}),(0,o.jsxs)(s.p,{children:["For example, if a module ",(0,o.jsx)(s.code,{children:"mine"})," contains a kubernetes cluster called ",(0,o.jsx)(s.code,{children:"dev"})," was\ncontained in module ",(0,o.jsx)(s.code,{children:"parent"}),". Then the FQRN and the name within docker would be:"]}),(0,o.jsx)(s.p,{children:(0,o.jsx)(s.code,{children:"server.dev.parent.mine.k8s-cluster.jumppad.dev"})})]}),"\n",(0,o.jsx)(s.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)(l,{name:"source",type:"string",required:"true",value:"",children:(0,o.jsx)(s.p,{children:"The source of the module, can either be a local file or GitHub repositories\nor remote archive."})}),(0,o.jsxs)(l,{name:"variables",type:"map[string]interface",required:"false",value:"",children:[(0,o.jsxs)(s.p,{children:["Module can define ",(0,o.jsx)(s.code,{children:"variables"})," making them dynamic, ",(0,o.jsx)(s.code,{children:"variables"})," are scoped\nto each module meaning that any variable that is set globally will not be\nreadable to modules or submodules. To set variables defined inside a module\nuse the ",(0,o.jsx)(s.code,{children:"varaibles"})," block"]}),(0,o.jsx)(s.pre,{language:"hcl",code:"  variables = {\n    network_id  = resource.network.cloud.id\n    consul_port = 18501\n  }\n",children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    network_id  = resource.network.cloud.id</span></span>\n<span><span style="color: var(--shiki-color-text)">    consul_port = 18501</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]})]}),"\n",(0,o.jsx)(a.default,{}),"\n",(0,o.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(s.h3,{children:"Module Reuse"}),"\n",(0,o.jsx)(s.p,{children:"The following example shows how a module can be used multiple times."}),"\n",(0,o.jsx)(s.pre,{language:"hcl",code:'resource "network" "cloud" {\n  subnet = "10.5.0.0/16"\n}\n\nmodule "consul_dc1" {\n  source = "./module_k3s"\n\n  variables = {\n    network_id  = resource.network.cloud.id\n    consul_port = 18500\n  }\n}\n\nmodule "consul_dc2" {\n  // CI has limited resources, add a manual dependency to ensure that only one module\n  // is created at once\n  depends_on = ["module.consul_dc1"]\n\n  source = "./module_k3s"\n\n  variables = {\n    network_id  = resource.network.cloud.id\n    consul_port = 18501\n  }\n}\n\noutput "dc1_addr" {\n  value = module.consul_dc1.output.consul_http_addr\n}\n\noutput "dc2_addr" {\n  value = module.consul_dc2.output.consul_http_addr\n}\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;network&quot; &quot;cloud&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  subnet </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;10.5.0.0/16&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">module</span><span style="color: var(--shiki-token-string-expression)"> &quot;consul_dc1&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./module_k3s&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    network_id  = resource.network.cloud.id</span></span>\n<span><span style="color: var(--shiki-color-text)">    consul_port = 18500</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">module</span><span style="color: var(--shiki-token-string-expression)"> &quot;consul_dc2&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// CI has limited resources, add a manual dependency to ensure that only one module</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">// is created at once</span></span>\n<span><span style="color: var(--shiki-color-text)">  depends_on </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;module.consul_dc1&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./module_k3s&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    network_id  = resource.network.cloud.id</span></span>\n<span><span style="color: var(--shiki-color-text)">    consul_port = 18501</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">output</span><span style="color: var(--shiki-token-string-expression)"> &quot;dc1_addr&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> module</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">consul_dc1</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">output</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">consul_http_addr</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">output</span><span style="color: var(--shiki-token-string-expression)"> &quot;dc2_addr&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> module</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">consul_dc2</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">output</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">consul_http_addr</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})}var l=!0;function i(e,s){throw Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}s.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,r.ah)(),e.components);return s?(0,o.jsx)(s,Object.assign({},e,{children:(0,o.jsx)(t,e)})):t(e)}},8691:function(e,s,n){"use strict";n.r(s),n.d(s,{__N_SSG:function(){return t}});var o=n(5893),r=n(1151);function a(e){let s=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre",em:"em"},(0,r.ah)(),e.components),{Properties:n,Property:a}=s;return n||l("Properties",!0),a||l("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.h2,{id:"meta_properties",children:"Meta Properties"}),"\n",(0,o.jsx)(s.p,{children:"All jumppad resources have the following read only properties."}),"\n",(0,o.jsxs)(n,{children:[(0,o.jsxs)(a,{name:"depends_on",type:"[]string",required:"false",value:"",children:[(0,o.jsxs)(s.p,{children:["An array of resources that this resource depends on. Jumppad will ensure that\nall resources referenced in ",(0,o.jsx)(s.code,{children:"depends_on"})," are created before the resource."]}),(0,o.jsx)(s.p,{children:'For example, the resource "mine" would be created after the resource "myother".'}),(0,o.jsx)(s.pre,{language:"hcl",code:'  resource "container" "mine" {\n    depends_on = ["resource.container.myother"]\n  }\n  \n  resource "container" "myother" {\n\n  }\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    depends_on </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-string-expression)">&quot;resource.container.myother&quot;</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;myother&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})}),(0,o.jsxs)(s.p,{children:["Where possible Jumppad attempts to automatically create a dependency graph\nby using interpolated properties. For example, the previous scenario could\nhave been written without using ",(0,o.jsx)(s.code,{children:"depends_on"})," by using interpolated properties."]}),(0,o.jsx)(s.pre,{language:"hcl",code:'  resource "container" "mine" {\n    image {\n      name = resource.container.myother.image.name\n    }\n  }\n  \n  resource "container" "myother" {\n    image {\n      name = "myimage:version"\n    }\n  }\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> resource</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">container</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">myother</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">image</span><span style="color: var(--shiki-token-constant)">.</span><span style="color: var(--shiki-color-text)">name</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;myother&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    </span><span style="color: var(--shiki-token-keyword)">image</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">      name </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;myimage:version&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">    }</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span></span>'})})]}),(0,o.jsx)(a,{name:"disabled",type:"bool",required:"false",value:"false",children:(0,o.jsx)(s.p,{children:"If set to false the resource will not be created."})}),(0,o.jsxs)(a,{name:"id",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsxs)(s.p,{children:["The unique ",(0,o.jsx)(s.code,{children:"id"})," for the resource, this value can be used in interpolation\nsyntax to reference properties for a resource."]}),(0,o.jsx)(s.pre,{code:"  resource.container.nic\n  ouput.myoutput\n  module.mine.submodule.resource.container.nic\n  module.mine.submodule.ouput.myoutput\n\n",children:(0,o.jsx)(s.code,{children:"  resource.container.nic\n  ouput.myoutput\n  module.mine.submodule.resource.container.nic\n  module.mine.submodule.ouput.myoutput\n\n"})})]}),(0,o.jsxs)(a,{name:"name",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsxs)(s.p,{children:["The name of the resource, ",(0,o.jsx)(s.em,{children:"note:"})," this value is not unique and does not\ntake into account if the resource is embedded in a module."]}),(0,o.jsxs)(s.p,{children:["This value is the same as the ",(0,o.jsx)(s.code,{children:"name"}),' field of the resource. i.e "mine".']}),(0,o.jsx)(s.pre,{language:"hcl",code:'  resource "container" "mine" {}\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(a,{name:"type",type:"string",required:"true",value:"",readonly:!0,children:[(0,o.jsx)(s.p,{children:"The string type of the resource."}),(0,o.jsxs)(s.p,{children:["This value is the same as the ",(0,o.jsx)(s.code,{children:"type"}),' field of the resource. i.e. "container"']}),(0,o.jsx)(s.pre,{language:"hcl",code:'  resource "container" "mine" {}\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>'})})]}),(0,o.jsxs)(a,{name:"module",type:"string",required:"false",value:"",readonly:!0,children:[(0,o.jsx)(s.p,{children:"The full module path for the resource. Should the resource be included\nin a module, this value will be the name of the module and any parent\nmodules that the resource is embedded in."}),(0,o.jsxs)(s.p,{children:["For example, given the following structure, the ",(0,o.jsx)(s.code,{children:"module"}),' value would be\n"mymodule.mysubmodule".']}),(0,o.jsx)(s.pre,{language:"hcl",code:'  resource "container" "mine" {}\n\n  ## included in\n\n  module "mysubmodule" {}\n  \n  ## included in\n\n  module "mymodule" {}\n',children:(0,o.jsx)(s.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;container&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">## included in</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">module</span><span style="color: var(--shiki-token-string-expression)"> &quot;mysubmodule&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span><span style="color: var(--shiki-color-text)">  </span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-comment)">## included in</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  </span><span style="color: var(--shiki-token-keyword)">module</span><span style="color: var(--shiki-token-string-expression)"> &quot;mymodule&quot;</span><span style="color: var(--shiki-color-text)"> {}</span></span>\n<span></span>'})})]}),(0,o.jsx)(a,{name:"file",type:"string",required:"false",value:"",readonly:!0,children:(0,o.jsx)(s.p,{children:"The absolute path of the file that contains this resource"})})]})]})}var t=!0;function l(e,s){throw Error("Expected "+(s?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}s.default=function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,r.ah)(),e.components);return s?(0,o.jsx)(s,Object.assign({},e,{children:(0,o.jsx)(a,e)})):a(e)}}},function(e){e.O(0,[9774,2888,179],function(){return e(e.s=6814)}),_N_E=e.O()}]);