(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8160],{2149:function(s,n,e){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/resources/functions",function(){return e(5929)}])},5929:function(s,n,e){"use strict";e.r(n),e.d(n,{__N_SSG:function(){return r}});var o=e(5893),a=e(1151);function t(s){let n=Object.assign({h1:"h1",p:"p",code:"code",h2:"h2",h3:"h3",pre:"pre"},(0,a.ah)(),s.components),{Properties:e,Property:t}=n;return e||i("Properties",!0),t||i("Property",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{children:"Resource Functions"}),"\n",(0,o.jsxs)(n.p,{children:["Shipyard configuration files can use built in functions which are interpolated at runtime.\nFor example the ",(0,o.jsx)(n.code,{children:"env([environment variable name])"})," function could be used to return\nthe value of an environment variable."]}),"\n",(0,o.jsx)(n.h2,{id:"env",children:"env"}),"\n",(0,o.jsx)(n.p,{children:"The env function can be used to interpolate a system set environment variable inside your configuration."}),"\n",(0,o.jsx)(n.h3,{children:"Parameters"}),"\n",(0,o.jsx)(e,{children:(0,o.jsx)(t,{name:"name",type:"string",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"The name of the environment variable to return."})})}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'resource "template" "mine" {\n  source = "./mysource.txt"\n  destination = "./mydestionation.txt"\n\n  variables = {\n    path = env("PATH")\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mydestionation.txt&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    path = env(&quot;PATH&quot;)</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h2,{id:"len",children:"len"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"len"})," function returns the lenght of a string or an array."]}),"\n",(0,o.jsx)(n.h3,{children:"Parameters"}),"\n",(0,o.jsx)(e,{children:(0,o.jsx)(t,{name:"value",type:"interface",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"The string or array to return the length of"})})}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'variable "myarray" {\n  value = [1,2,3]\n}\n\nvariable "mystring" {\n  value = "string"\n}\n\nresource "template" "mine" {\n  source = "./mysource.txt"\n  destination = "./mydestionation.txt"\n\n  variables = {\n    array_length = len(variable.myarray) // 3\n    string_length = len(variable.mystring) // 6\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">variable</span><span style="color: var(--shiki-token-string-expression)"> &quot;myarray&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> [</span><span style="color: var(--shiki-token-constant)">1</span><span style="color: var(--shiki-color-text)">,</span><span style="color: var(--shiki-token-constant)">2</span><span style="color: var(--shiki-color-text)">,</span><span style="color: var(--shiki-token-constant)">3</span><span style="color: var(--shiki-color-text)">]</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">variable</span><span style="color: var(--shiki-token-string-expression)"> &quot;mystring&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  value </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;string&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>\n<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mydestionation.txt&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    array_length = len(variable.myarray) // 3</span></span>\n<span><span style="color: var(--shiki-color-text)">    string_length = len(variable.mystring) // 6</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h2,{id:"home",children:"home"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"home"})," function returns the location of the current users HOME folder."]}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'resource "template" "mine" {\n  source = "./mysource.txt"\n  destination = "./mydestionation.txt"\n\n  variables = {\n    home = home()\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mydestionation.txt&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    home = home()</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h2,{id:"file",children:"file"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"file"})," function returns the contents of a file at the given path."]}),"\n",(0,o.jsx)(n.h3,{children:"Parameters"}),"\n",(0,o.jsx)(e,{children:(0,o.jsx)(t,{name:"path",type:"interface",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"The path of the file to read."})})}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'resource "template" "mine" {\n  source = "./mysource.txt"\n  destination = "./mydestionation.txt"\n\n  variables = {\n    contents = file("myfile.txt")\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mydestionation.txt&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    contents = file(&quot;myfile.txt&quot;)</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h2,{id:"dir",children:"dir"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"dir"})," function returns the directory of the file containing the current\nresource."]}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'resource "template" "mine" {\n  source = "${dir()}/mysource.txt"\n  destination = "./mydestination.txt"\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">dir</span><span style="color: var(--shiki-color-text)">()</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">/mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mydestination.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h2,{id:"trim",children:"trim"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"trim"})," function removes whitespace from the given string."]}),"\n",(0,o.jsx)(n.h3,{children:"Parameters"}),"\n",(0,o.jsx)(e,{children:(0,o.jsx)(t,{name:"value",type:"string",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"The string to trim whitespace from."})})}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'resource "template" "mine" {\n  source = "./mysource.txt"\n  destination = "./mydestionation.txt"\n\n  variables = {\n    contents = trim(file("myfile.txt"))\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mydestionation.txt&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    contents = trim(file(&quot;myfile.txt&quot;))</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h2,{id:"jumppad",children:"jumppad"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"jumppad"})," function returns the location of the ",(0,o.jsx)(n.code,{children:".jumppad"})," folder."]}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'resource "template" "mine" {\n  source = "./mysource.txt"\n  destination = "./mydestination.txt"\n\n  variables = {\n    location = jumppad()\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mydestination.txt&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    location = jumppad()</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h2,{id:"docker_ip",children:"docker_ip"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"docker_ip"})," function returns the ip address of the configured docker\nhost."]}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'resource "template" "mine" {\n  source = "./mysource.txt"\n  destination = "./mydestination.txt"\n\n  variables = {\n    url = "${docker_ip()}:8080"\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mydestination.txt&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    url = &quot;${docker_ip()}:</span><span style="color: var(--shiki-token-constant)">8080</span><span style="color: var(--shiki-token-string-expression)">&quot;</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">  }</span></span>\n<span><span style="color: var(--shiki-token-string-expression)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h2,{id:"docker_host",children:"docker_host"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"docker_host"})," function returns the socket or TCP address for the current\nDocker host."]}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'resource "template" "mine" {\n  source = "./mysource.txt"\n  destination = "./mydestination.txt"\n\n  variables = {\n    DOCKER_HOST = docker_host\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mydestination.txt&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    DOCKER_HOST = docker_host</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h2,{id:"data",children:"data"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"data"})," function creates a temporary folder that exists until ",(0,o.jsx)(n.code,{children:"jumppad down"}),"\nis executed. Data folders are created with the permissions ",(0,o.jsx)(n.code,{children:"755"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["First use of ",(0,o.jsx)(n.code,{children:"data"})," creates the folder inside of ",(0,o.jsx)(n.code,{children:".jumppad/data"}),", subsequent\nuses return the path."]}),"\n",(0,o.jsx)(n.h3,{children:"Parameters"}),"\n",(0,o.jsx)(e,{children:(0,o.jsx)(t,{name:"name",type:"string",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"Name of the data folder to create, or path to return."})})}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'resource "template" "mine" {\n  source = "./mysource.txt"\n  destination = "${data("temp")}/file.txt"\n\n  variables = {\n    DOCKER_HOST = docker_host\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">data</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;temp&quot;</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">/file.txt&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    DOCKER_HOST = docker_host</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h2,{id:"data_with_permissions",children:"data_with_permissions"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"data_with_permissions"})," function creates a temporary folder that exists until ",(0,o.jsx)(n.code,{children:"jumppad down"}),"\nis executed. Unlike ",(0,o.jsx)(n.code,{children:"data"}),", ",(0,o.jsx)(n.code,{children:"data_with_permissions"})," allows you to specify the directory\npermissions as a parameter."]}),"\n",(0,o.jsxs)(n.p,{children:["First use of ",(0,o.jsx)(n.code,{children:"data_with_permissions"})," creates the folder inside of ",(0,o.jsx)(n.code,{children:".jumppad/data"}),", subsequent\nuses return the path."]}),"\n",(0,o.jsx)(n.h3,{children:"Parameters"}),"\n",(0,o.jsxs)(e,{children:[(0,o.jsx)(t,{name:"name",type:"string",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"Name of the data folder to create, or path to return."})}),(0,o.jsx)(t,{name:"permissions",type:"int",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"Name of the data folder to create, or path to return."})})]}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'resource "template" "mine" {\n  source = "./mysource.txt"\n  destination = "${data_with_permissions("temp", 644)}/file.txt"\n\n  variables = {\n    DOCKER_HOST = docker_host\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;</span><span style="color: var(--shiki-token-keyword)">${</span><span style="color: var(--shiki-token-function)">data_with_permissions</span><span style="color: var(--shiki-color-text)">(</span><span style="color: var(--shiki-token-string-expression)">&quot;temp&quot;</span><span style="color: var(--shiki-color-text)">, </span><span style="color: var(--shiki-token-keyword)">644</span><span style="color: var(--shiki-color-text)">)</span><span style="color: var(--shiki-token-keyword)">}</span><span style="color: var(--shiki-token-string-expression)">/file.txt&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    DOCKER_HOST = docker_host</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h2,{id:"random_number",children:"random_number"}),"\n",(0,o.jsx)(n.p,{children:"Generates a random number within the given range."}),"\n",(0,o.jsx)(n.h3,{children:"Parameters"}),"\n",(0,o.jsxs)(e,{children:[(0,o.jsx)(t,{name:"min",type:"int",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"Minimum value for the random number."})}),(0,o.jsx)(t,{name:"max",type:"int",required:"true",value:"",children:(0,o.jsx)(n.p,{children:"Maximum value for the random number."})})]}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'resource "template" "mine" {\n  source = "./mysource.txt"\n  destination = "./file.txt"\n\n  variables = {\n    port = random_number(20000,30000)\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./file.txt&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    port = random_number(20000,30000)</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})}),"\n",(0,o.jsx)(n.h2,{id:"random_creature",children:"random_creature"}),"\n",(0,o.jsx)(n.p,{children:"Generates a random string in the form of a mythical creature."}),"\n",(0,o.jsx)(n.pre,{language:"hcl",code:'resource "template" "mine" {\n  source = "./mysource.txt"\n  destination = "./file.txt"\n\n  variables = {\n    name = random_creature() // Lively-Imp, Mellifluous-Unicorn\n  }\n}\n',children:(0,o.jsx)(n.code,{className:"language-hcl",children:'<span><span style="color: var(--shiki-token-keyword)">resource</span><span style="color: var(--shiki-token-string-expression)"> &quot;template&quot; &quot;mine&quot;</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">  source </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./mysource.txt&quot;</span></span>\n<span><span style="color: var(--shiki-color-text)">  destination </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> </span><span style="color: var(--shiki-token-string-expression)">&quot;./file.txt&quot;</span></span>\n<span></span>\n<span><span style="color: var(--shiki-color-text)">  variables </span><span style="color: var(--shiki-token-keyword)">=</span><span style="color: var(--shiki-color-text)"> {</span></span>\n<span><span style="color: var(--shiki-color-text)">    name = random_creature() // Lively-Imp, Mellifluous-Unicorn</span></span>\n<span><span style="color: var(--shiki-color-text)">  }</span></span>\n<span><span style="color: var(--shiki-color-text)">}</span></span>\n<span></span>'})})]})}var r=!0;function i(s,n){throw Error("Expected "+(n?"component":"object")+" `"+s+"` to be defined: you likely forgot to import, pass, or provide it.")}n.default=function(){let s=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),s.components);return n?(0,o.jsx)(n,Object.assign({},s,{children:(0,o.jsx)(t,s)})):t(s)}}},function(s){s.O(0,[9774,2888,179],function(){return s(s.s=2149)}),_N_E=s.O()}]);